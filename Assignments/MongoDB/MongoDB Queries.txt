use db

db.createCollection("posts")

db.posts.insertOne({title: "Post Title 1",body: "Body of post.",category: "News",likes: 1,tags: ["news", "events"],date: Date()})

db.posts.insertMany([  
  {
    title: "Post Title 2",
    body: "Body of post.",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 3",
    body: "Body of post.",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 4",
    body: "Body of post.",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])

db.posts.find()

db.posts.findOne()   

db.posts.find( {category: "News"} )  

db.posts.find({}, {_id: 0, title: 1, date: 1})

db.posts.find({}, {title: 1, date: 0}) 

db.posts.updateOne( { title: "Post Title 1" }, { $set: { likes: 2 } } ) 

db.posts.find( { title: "Post Title 1" } ) 

db.posts.updateOne( 
  { title: "Post Title 5" }, 
  {
    $set: 
      {
        title: "Post Title 5",
        body: "Body of post.",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  }, 
  { upsert: true }
)    

db.posts.updateMany({}, { $inc: { likes: 1 } })

db.posts.deleteOne({ title: "Post Title 5" })

db.posts.deleteMany({ category: "Technology" }) 

show collections 

db.createCollection("books")

show collections

db.posts.insertMany([  
  {
    title: "James Bond",
    price: 1000
  },
  {
    title: "Bright Future",
    price: 500
  },
  {
    title: "Children Tales",
    price:199
  },
  {
    title: "Sherlock Holmes",
    price:300
  },
  {
    title: "Comics",
    price:300
  }
])

db.posts.aggregate([
  {
    $match: { likes: { $gt: 1 } }
  },
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
])   

db.posts.aggregate(
    [ { $group : { _id : "$property_type" } } ]
)   

db.posts.aggregate([ { $limit: 1 } ])

db.createCollection("restaurants")

db.restaurants.insertMany([
    {
        address: {
        building: '2780',
        coord: [ -73.98241999999999, 40.579505 ],
        street: 'Stillwell Avenue',
        zipcode: '11224'
      },
      cuisine: 'American',
      name: 'Riviera Caterer'
    },
    {
        address: {
        building: '7114',
        coord: [ -73.9068506, 40.6199034 ],
        street: 'Avenue U',
        zipcode: '11234'
      },
      cuisine: 'Delicatessen',
      name: "Wilken'S Fine Food"
    },
    {
      address: {
        building: '2206',
        coord: [ -74.1377286, 40.6119572 ],
        street: 'Victory Boulevard',
        zipcode: '10314'
      },
      cuisine: 'Jewish/Kosher',
      name: 'Kosher Island'
    },
    {
      address: {
        building: '469',
        coord: [ -73.961704, 40.662942 ],
        street: 'Flatbush Avenue',
        zipcode: '11225'
      },
      cuisine: 'Hamburgers',
      name: "Wendy'S"
    },
    {
      address: {
        building: '1007',
        coord: [ -73.856077, 40.848447 ],
        street: 'Morris Park Ave',
        zipcode: '10462'
      },
      cuisine: 'Bakery',
      name: 'Morris Park Bake Shop'
    }
  ])
  
  db.restaurants.aggregate([
  {
    $project: {
      "name": 1,
      "cuisine": 1,
      "address": 1
    }
  },
  {
    $limit: 5
  }
])   

db.restaurants.aggregate([ 
  { 
    $sort: { "name": -1 } 
  },
  {
    $project: {
      "cuisine": 1,
      "address": 1
    }
  },
  {
    $limit: 2
  }
])       

db.createCollection("listingsAndReviews")

db.listingsAndReviews.insertMany([
  {
    name: 'House close to station & direct to opera house....',
    accommodates: 16
  },
  { 
    name: 'Kaena O Kekai', 
    accommodates: 16 },
  {
    name: 'Great Complex of the Cellars',
    accommodates: 16
  },
  {
    name: 'Barra da Tijuca beach house',
    accommodates: 16
  },
  {
    name: 'DOWNTOWN VIP MONTREAL ,HIGH END DECOR,GOOD VALUE..',
    accommodates: 16
  }
])

show collections

db.listingsAndReviews.aggregate([ 
  { 
    $sort: { "accommodates": -1 } 
  },
  {
    $project: {
      "name": 1,
      "accommodates": 1
    }
  },
  {
    $limit: 5
  }
])   

db.restaurants.aggregate([
  {
    $addFields: {
      avgGrade: { $avg: "$grades.score" }
    }
  },
  {
    $project: {
      "name": 1,
      "avgGrade": 1
    }
  },
  {
    $limit: 5
  }
])   

db.restaurants.aggregate([
  {
    $match: { "cuisine": "Hamburgers" }
  },
  {
    $count: "totalChinese"
  }
])
  
db.listingsAndReviews.aggregate([
  {
    $group: {
      _id: "$property_type",
      properties: {
        $push: {
          name: "$name",
          accommodates: "$accommodates",
          price: "$price",
        },
      },
    },
  },
  { $out: "properties_by_type" },
])    

db.createCollection("movies")

db.movies.insertMany([
  {
    year: 2008,
    title: 'Star Wars: The Clone Wars'
  },
  {
    title: 'Robot Chicken: Star Wars',
    year: 2007
  },
  {
    title: 'Star!',
    year: 1968
  },
  {
    title: 'Star',
    year: 2001
  },
  {
    year: 1977,
    title: 'Star Wars: Episode IV - A New Hope'
  }
])

db.movies.find().sort({"Year":-1})  

db.createCollection("notes", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [ "title", "body" ],
      properties: {
        title: {
          bsonType: "string",
          description: "Title of post - Required."
        },
        body: {
          bsonType: "string",
          description: "Body of post - Required."
        },
        category: {
          bsonType: "string",
          description: "Category of post - Optional."
        },
        likes: {
          bsonType: "int",
          description: "Post like count. Must be an integer - Optional."
        },
        tags: {
          bsonType: ["string"],
          description: "Must be an array of strings - Optional."
        },
        date: {
          bsonType: "date",
          description: "Must be a date - Optional."
        }
      }
    }
  }
})

show collections
db.notes.drop() 

db.posts.find({title: {$regex: "Post Title 2" }}).forEach(printjson) 

db.posts.find({$and: [{"category": "Event"}, {"likes": "2"}]}).pretty();
